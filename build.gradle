import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    // Use ShadowJAR to build the JAR
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    // Use Blossom to replace tokens
    id 'net.kyori.blossom' version '1.3.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

ext {
    pluginName = 'BloomAB'
    pluginVersion = '1.5.3'
    pluginDescription = 'Anti bot protection for Bloom servers'
    pluginAuthor = 'Bloom'
    pluginWebsite = 'https://bloom.host'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'net.kyori.blossom'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }

    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.geri.dev/releases' }
    }

    dependencies {
        // Use repackaged SnakeYAML for configs
        implementation 'dev.geri:Konfig:1.7'

        // Use GSON for JSON processing
        implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    }
}

// Task to create a single 'fat' JAR including all subprojects
task uberJar(type: ShadowJar) {
    // Set the output file name and location
    archiveFileName = "${project.ext.pluginName}-${project.ext.pluginVersion}.jar"

    // Include all subprojects' source sets and dependencies
    subprojects.each { subproject ->
        from subproject.sourceSets.main.output
        configurations = [subproject.configurations.runtimeClasspath]
    }
}

// Make sure the uberJar task is executed after all subprojects are built
tasks.uberJar.dependsOn subprojects*.tasks*.build
